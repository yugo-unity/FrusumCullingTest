#pragma kernel InstancingCullLOD

#include "./InstanceData.hlsl"

float3 _CameraPos;
float _LODThreshold;
float _HalfFOV;
StructuredBuffer<InstanceData> _InstanceData;
StructuredBuffer<float4> _FrustumPlanes; // xyz-normal, w-distance
RWStructuredBuffer<uint> _Lod0Indexes;
RWStructuredBuffer<uint> _Lod1Indexes;

inline float3 GetPositivePoint(float3 min, float3 size, float3 normal)
{
    return step(0, normal) * size + min;
}
inline float3 GetNegativePoint(float3 min, float3 size, float3 normal)
{
    return step(normal, 0) * size + min;
}
float GetDistance(float4 plane, float3 pos)
{   
    return dot(plane.xyz, pos) + plane.w;
}
int TestAABBFrustum(float3 boundMin, float3 boundSize)
{
    int result = 1; // inside
    
    for (int i = 0; i < 6; i++)
    {
        float4 plane = _FrustumPlanes[i];
        float3 vp = GetPositivePoint(boundMin, boundSize, plane.xyz);
        float dp = GetDistance(plane, vp);
        if (dp < 0)
            return 0; // outside;
        // float vn = GetNegativePoint(boundMin, boundSize, plane.normal);
        // float dn = CalcDistanceToPoint(plane, vn);
        // if (dn < 0)
        //     result = 2; // intersect
    }
    
    return result;
}

[numthreads(64, 1, 1)]
void InstancingCullLOD(uint id : SV_DispatchThreadID)
{
    InstanceData data = _InstanceData[id];

    int cullResult = TestAABBFrustum(data.boundPoint, data.boundSize);
    if (cullResult == 0)
        return;
    
    float3 position = float3(data.worldMatrix[0].w, data.worldMatrix[1].w, data.worldMatrix[2].w);
    float dist = length(position - _CameraPos);
    float frustumHeight = 2.0 * dist * tan(_HalfFOV);
    if (data.boundSize.y / frustumHeight > _LODThreshold)
    {
        int index = _Lod0Indexes.IncrementCounter();
        _Lod0Indexes[index] = id;
    }
    else
    {
        int index = _Lod1Indexes.IncrementCounter();
        _Lod1Indexes[index] = id;
    }
}
