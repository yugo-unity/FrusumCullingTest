#pragma kernel InstancingCullLOD

#include "Assets/Scripts/GPU/InstanceDta.hlsl"

float3 _CameraPos;
float _LODThreshold;
StructuredBuffer<InstanceData> _InstanceData;
StructuredBuffer<float4> _FrustumPlanes;
RWStructuredBuffer<uint> _Lod0Indexes;
RWStructuredBuffer<uint> _Lod1Indexes;

// skip for loop by considering Structured-Of-Array
// also skip near and far clips
bool TestAABBFrustum(float3 bounds, float3 boundExtents)
{
    float4 cx = bounds.xxxx;
    float4 cy = bounds.yyyy;
    float4 cz = bounds.zzzz;
    float4 distances = _FrustumPlanes[0] * cx + _FrustumPlanes[1] * cy + _FrustumPlanes[2] * cz + _FrustumPlanes[3];
    float4 ex = boundExtents.xxxx;
    float4 ey = boundExtents.yyyy;
    float4 ez = boundExtents.zzzz;
    float4 radii = abs(_FrustumPlanes[0]) * ex + abs(_FrustumPlanes[1]) * ey + abs(_FrustumPlanes[2]) * ez;

    //bool4 isCulled = (distances + radii) < float4(0, 0, 0, 0);
    bool4 isCulled = step(distances + radii, float4(0, 0, 0, 0));
    
    return any(isCulled);
}

[numthreads(64, 1, 1)] // TODO fujioka: thread数は適当なので要考慮
void InstancingCullLOD(uint id : SV_DispatchThreadID)
{
    InstanceData data = _InstanceData[id];

    if (TestAABBFrustum(data.boundPoint, data.boundSize))
        return;
    
    float3 position = float3(data.worldMatrix[0].w, data.worldMatrix[1].w, data.worldMatrix[2].w);
    float dist = length(position - _CameraPos);
    if (dist >= _LODThreshold)
    {
        int index = _Lod1Indexes.IncrementCounter();
        _Lod1Indexes[index] = id;
    }
    else
    {
        int index = _Lod0Indexes.IncrementCounter();
        _Lod0Indexes[index] = id;
    }
}
